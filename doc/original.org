* Original randomhack source (6471)
** main.c (182)
   Includes all the global definitions, item and creature structs, and
   the main game loop. Also #includes all the other files with source
   definitions.
*** int main(void) (23)
    Very simple game loop with these function calls:
    getInput()
    gameLogic()
    draw()
** sprites.h (813)
   Holds the data for all the sprites used in the game. Represented as
   arrays of short int, each sprite consists of 64 (8*8) pixels and
   one color. No functions are defined in this file.
** draw.h (347)
*** bool lineOfSight(int x1, int y1, int x2, int y2) (95)
    Bresenhams used to determine line of sight. Returns false if there
    are any intervening block(s), true otherwise.
*** inline void drawPixel(int position,int color) (7)
    Utility function to set a value in VRAM_A. Doesn't seem to be used
    in the code. Guards against addresses >= 49152.
*** void drawLevel(int type, int color, int expand, int wobbley) (22)
    Draws blocks in the level, with some flags for exanding and
    wobblying randomly.
*** void drawSprite(short int sprite[], short int xpos, short int ypos) (17)
    Loops through the 8x8 sprite, drawing the color found at index 64
    if a pixel should be set, otherwise color 0.
*** void drawThings() (102)
    Draws items, creatures, and the player. Has special code for
    hardcore mode (for line-of-sight and FOW). Draws player sprite
    last, so I assume that it's drawn over any other object.
*** void draw() (73)
    Calls drawThings if redraw is true. Redraws the console.
** gamelogic.h (2123)
*** void pushText(const char *pushstring) (16)
    Adds a line of text to the console, and moves the previous lines
    upward. There are 10 lines of text, and each line has 32
    characters.
*** void createCreature(int expos, int eypos, int specific) (771)
    Creates a random creature at expos, eypos. If specific is > 0, the
    creature type is specified by specific instead.
*** void createSword(short int expos, short int eypos) (42)
    Puts a random sword at expos, eypos. Sword power is determined by
    level.
*** void createItem(short int expos, short int eypos, short int type) (554)
    Creates specified item at expos, eypos. Modifies itemmatrix.
*** void createNpc(short int expos, short int eypos) (50)
    Creates a shop keeper at expos, eypos. Modifes creaturematrix.
*** void createPlayerName() (48)
    Sets playername, playergender, and playerattract.
*** void resetGame() (53)
    Nullifies values and displays starting message in the console.
*** void gameLogic() (57)
    Check for player hp limit and player death. Revive if player has
    found an ankh.
*** void killCreature(short int expos, short int eypos) (91)
    Remove creature and create blood (much blood if gib and
    playeroption is set to true). Also contains code for killing the
    final boss.
*** void crushItem(short int expos, short int eypos) (78)
    Code for crushing various things; shop items, sweet berries,
    bitter berries, HID. Other items can be crushed to dust. Contains
    code for summoning create #42 (?).
*** void scrollQuotes() (319)
    Contains quotes found on all the scrolls. If we're on the final
    level, display quote #23.
** newlevel.h (771)
*** void cutLine(int x1, int y1, int x2, int y2, int tunnelsize) (55)
    Uses Bresenhams to cut a line with the given width in the level.
*** void newLevel() (707)
    Longest function in randomhack? Code for generating the level
    layout, placing all items and creatures, and also special code for
    final level and NPC (shop keeper) level. Contains code for
    rendering the level as well.
** move.h (848)
*** void moveCreature(short int expos, short int eypos, bool action) (439)
    Move a creature that is positioned at expos, eypos. Action
    determines what the creature can do, action == false: move, action
    == true: attack. Makes ranged attacks when moving. When moving,
    check where the player is, if he is within a specified range, move
    towards the player. There's a check for LOS here as
    well. Essentially uses the same code as when clicking in the field
    and determining where the player should move/perform action, so
    should be able to reuse that code here. Some special code for
    wallclinging creatures. If flaming, light things and spawn flame
    items. Crush items if big. Tread on incendiary devices (GO
    BOOM). Crush environment when walking.
*** void moveCreatures(bool action) (11)
    Goes through the 32x24 creaturematrix and calls moveCreature on
    each.  Called from movePlayer, first with action == true (attack)
    and then with action == false (move).
*** void movePlayer(int xdif, int ydif) (385)
    Take action in the xdif, ydif direction. If an enemy is at
    playerx+xdif, playery+ydif, then attack, else move. If creature at
    position moving to is NPC, talk to the NPC. Check for fear,
    terror, insanity. When moving, automatically pick up gold when
    stepped over. If moving into a flame, player catches on fire (and
    sticks). Check for reaching goal and secretgoal. Perform
    attack. Unfreeze creatures before calling moveCreatures. Apply
    effects of poison and burn. Douse flame and ember items. Change
    sprite depending on if player is burning, poisoned, or critically
    low health.
** getinput.h (1393)
*** void useItem() (992)
    Use item that is lying on the ground or found in inventory. All
    the code for using various items. After item is used, perform warp.
**** Rubble
     Crush item below player
**** Sweet berries
     Recover hp and weaken poison.
**** Sweet jam
     Seems to be identical to using sweet berries, except that it says
     "You eat the sweet jam" instead of "You eat the sweet berries".
**** Bitter berries
     Increase max hp.
**** Bitter jam
     Increase player power and cure player poison.
**** Empty bottle
     Scoop up various things, SWEETJAM, BITTERJAM, WATERPOOL, DUST,
     BLOOD, surrounding WATER tile, SWEETBERRIES, BITTERBERRIES.
**** Sweet berry bottle
     Essentially the same as using sweet berries. If charges becomes
     0, the bottle turns into an empty bottle again.
**** Sweet jam bottle
     See sweet berry bottle.
**** Bitter berry bottle
     See sweet berry bottle.
**** Bitter jam bottle
     See sweet berry bottle.
**** Water bottle
     Douse flames and harm waterweak creatures.
**** Dust bottle
     Douse flames.
**** Blood bottle
     Poor blood on the ground.
**** Torch
     Swing the torch around. Evaporate water tiles. Harm fireweak
     creatures. Light sticks all around and in inventory. See if the
     torch goes out (charges == 0).
**** Stick
     Use while staying on top of a torch to light the stick.
**** Pick
     Remove BLOCK tiles, turning them into rubble items (or maybe gold
     if we're in the secret level). Check if the pick wears out.
**** Amulet
***** Warp amulet
      Sets usewarp to true. A big block of outcommented code.
***** Thunder amulet
      Give damage to enemies all around.
***** Phase amulet
      Warp to next level.
***** Life amulet
      Recover maxhp/2 hp.
**** Bluefly
     Convert shopkeepers and items. Crush walls and create embers,
     dust, and rubble. Evaporate waters. Create flames. Damage all
     enemies.

     So I guess that this is some kind of bomb? :)
**** Scroll
     Simply calls scrollQuotes() and displays a quote.
**** Key
     Use on top of a chest to open it, revealing its contents.
**** Chest
     Explain that a key is needed.
**** Incendiary device
     Explain that this device should be dropped so enemies can walk
     over it.
**** Identifier
     Reveal details about things in the inventory.
**** Store item
     Explain that you need to buy it first.
*** void getInput() (392)
    Checks for input and contains alot of game logic code.
**** Start game
**** Show control info
**** Select item (up, down)
**** Pick up item / swap weapon
     Modify store item into real item if player can afford it.
**** Drop item
**** Use item
**** Move
**** Look
     Check that it is within lookdistance.
***** Look at player
***** Look at a creature
***** Look at an item
***** Look at level
